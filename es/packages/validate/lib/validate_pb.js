// @generated by protoc-gen-es v1.2.0 with parameter "target=js+dts"
// @generated from file validate.proto (package cybozu.validate, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// Custom extensions to generate code for gRPC request validation/normalization.
//
// The custom options defined here are:
// - `cybozu.validate.ignored` message option.
// - `cybozu.validate.required` oneof option.
// - `cybozu.validate.rules` field option.
//
// To generate normalization/validation code, use `protoc-gen-$LANG-cybozu-validate`
// for the target language.

import { proto3 } from "@bufbuild/protobuf";

/**
 * FieldRules encapsulates the rules for each type of field.
 * Depending on the field type, one or two rule sets can be specified.
 *
 * @generated from message cybozu.validate.FieldRules
 */
export const FieldRules = proto3.makeMessageType(
  "cybozu.validate.FieldRules",
  () => [
    { no: 1, name: "float", kind: "message", T: FloatRules, oneof: "type" },
    { no: 2, name: "double", kind: "message", T: DoubleRules, oneof: "type" },
    { no: 3, name: "int32", kind: "message", T: Int32Rules, oneof: "type" },
    { no: 4, name: "int64", kind: "message", T: Int64Rules, oneof: "type" },
    { no: 5, name: "uint32", kind: "message", T: Uint32Rules, oneof: "type" },
    { no: 6, name: "uint64", kind: "message", T: Uint64Rules, oneof: "type" },
    { no: 7, name: "sint32", kind: "message", T: Int32Rules, oneof: "type" },
    { no: 8, name: "sint64", kind: "message", T: Int64Rules, oneof: "type" },
    { no: 9, name: "fixed32", kind: "message", T: Uint32Rules, oneof: "type" },
    { no: 10, name: "fixed64", kind: "message", T: Uint64Rules, oneof: "type" },
    { no: 11, name: "sfixed32", kind: "message", T: Int32Rules, oneof: "type" },
    { no: 12, name: "sfixed64", kind: "message", T: Int64Rules, oneof: "type" },
    { no: 13, name: "bool", kind: "message", T: BoolRules, oneof: "type" },
    { no: 14, name: "string", kind: "message", T: StringRules, oneof: "type" },
    { no: 15, name: "bytes", kind: "message", T: BytesRules, oneof: "type" },
    { no: 16, name: "enum", kind: "message", T: EnumRules, oneof: "type" },
    { no: 17, name: "message", kind: "message", T: MessageRules, oneof: "type" },
    { no: 1000, name: "repeated", kind: "message", T: ItemsRules, oneof: "items" },
    { no: 1001, name: "map", kind: "message", T: ItemsRules, oneof: "items" },
  ],
);

/**
 * ItemsRules are optional message to specify the constraints on the number
 * of items in a repeated field or a map type.
 *
 * @generated from message cybozu.validate.ItemsRules
 */
export const ItemsRules = proto3.makeMessageType(
  "cybozu.validate.ItemsRules",
  () => [
    { no: 1, name: "min_items", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "max_items", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ],
);

/**
 * FloatRules provides rules for `float` field.
 *
 * @generated from message cybozu.validate.FloatRules
 */
export const FloatRules = proto3.makeMessageType(
  "cybozu.validate.FloatRules",
  () => [
    { no: 1, name: "lt", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 3, name: "gt", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
    { no: 4, name: "gte", kind: "scalar", T: 2 /* ScalarType.FLOAT */, opt: true },
  ],
);

/**
 * DoubleRules provides rules for `double` field.
 *
 * @generated from message cybozu.validate.DoubleRules
 */
export const DoubleRules = proto3.makeMessageType(
  "cybozu.validate.DoubleRules",
  () => [
    { no: 1, name: "lt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 3, name: "gt", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: "gte", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
  ],
);

/**
 * Int32Rules provides rules for `int32`, `sint32`, `sfixed32` fields.
 *
 * @generated from message cybozu.validate.Int32Rules
 */
export const Int32Rules = proto3.makeMessageType(
  "cybozu.validate.Int32Rules",
  () => [
    { no: 1, name: "lt", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "gt", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "gte", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ],
);

/**
 * Int64Rules provides rules for `int64`, `sint64`, `sfixed64` fields.
 *
 * @generated from message cybozu.validate.Int64Rules
 */
export const Int64Rules = proto3.makeMessageType(
  "cybozu.validate.Int64Rules",
  () => [
    { no: 1, name: "lt", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "gt", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 4, name: "gte", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ],
);

/**
 * Uint32Rules provides rules for `uint32` and `fixed32` fields.
 *
 * @generated from message cybozu.validate.Uint32Rules
 */
export const Uint32Rules = proto3.makeMessageType(
  "cybozu.validate.Uint32Rules",
  () => [
    { no: 1, name: "lt", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "gt", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "gte", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ],
);

/**
 * Uint64Rules provides rules for `uint64` and `fixed64` fields.
 *
 * @generated from message cybozu.validate.Uint64Rules
 */
export const Uint64Rules = proto3.makeMessageType(
  "cybozu.validate.Uint64Rules",
  () => [
    { no: 1, name: "lt", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 2, name: "lte", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: "gt", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: "gte", kind: "scalar", T: 4 /* ScalarType.UINT64 */, opt: true },
  ],
);

/**
 * BoolRules provides rules for `bool` field.
 * Currently, no rule is available.
 *
 * @generated from message cybozu.validate.BoolRules
 */
export const BoolRules = proto3.makeMessageType(
  "cybozu.validate.BoolRules",
  [],
);

/**
 * StringRules provides rules for `string` field.
 *
 * @generated from message cybozu.validate.StringRules
 */
export const StringRules = proto3.makeMessageType(
  "cybozu.validate.StringRules",
  () => [
    { no: 1, name: "norm", kind: "enum", T: proto3.getEnumType(StringRules_UnicodeNormalizationForm) },
    { no: 2, name: "ignore_empty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "min_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "max_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 5, name: "regex", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 100, name: "email", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "predefined" },
    { no: 101, name: "uri", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "predefined" },
    { no: 102, name: "e164", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "predefined" },
  ],
);

/**
 * UNICODE normalization forms.
 * In addition to the forms defined by https://www.unicode.org/reports/tr15/,
 * we include PRECIS profiles as they are considered a variant of the NFC form.
 *
 * @generated from enum cybozu.validate.StringRules.UnicodeNormalizationForm
 */
export const StringRules_UnicodeNormalizationForm = proto3.makeEnum(
  "cybozu.validate.StringRules.UnicodeNormalizationForm",
  [
    {no: 0, name: "NFC"},
    {no: 1, name: "NFD"},
    {no: 2, name: "NFKC"},
    {no: 3, name: "NFKD"},
    {no: 100, name: "PRECIS_USERNAME_CASE_MAPPED"},
    {no: 101, name: "PRECIS_USERNAME_CASE_PRESERVED"},
    {no: 102, name: "PRECIS_OPAQUE_STRING"},
  ],
);

/**
 * BytesRules provides rules for `bytes` field.
 *
 * @generated from message cybozu.validate.BytesRules
 */
export const BytesRules = proto3.makeMessageType(
  "cybozu.validate.BytesRules",
  () => [
    { no: 3, name: "min_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "max_length", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ],
);

/**
 * EnumRules provides rules for `enum` field.
 *
 * @generated from message cybozu.validate.EnumRules
 */
export const EnumRules = proto3.makeMessageType(
  "cybozu.validate.EnumRules",
  () => [
    { no: 1, name: "required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "defined_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * MessageRules provides rules for `message` field.
 * For a message field, validation/normalization will be done recursively.
 *
 * @generated from message cybozu.validate.MessageRules
 */
export const MessageRules = proto3.makeMessageType(
  "cybozu.validate.MessageRules",
  () => [
    { no: 1, name: "required", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

