// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: cybozu/validate/options.proto

// Custom extensions to generate code for gRPC request validation/normalization.
//
// The custom options defined here are:
// - `cybozu.validate.ignored` message option.
// - `cybozu.validate.required` oneof option.
// - `cybozu.validate.rules` field option.
//
// To generate normalization/validation code, use `protoc-gen-$LANG-cybozu-validate`
// for the target language.

package validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// UNICODE normalization forms.
// In addition to the forms defined by https://www.unicode.org/reports/tr15/,
// we include PRECIS profiles as they are considered a variant of the NFC form.
type StringRules_UnicodeNormalizationForm int32

const (
	// NFC form as defined by https://www.unicode.org/reports/tr15/
	StringRules_NFC StringRules_UnicodeNormalizationForm = 0
	// NFD form as defined by https://www.unicode.org/reports/tr15/
	StringRules_NFD StringRules_UnicodeNormalizationForm = 1
	// NFKC form as defined by https://www.unicode.org/reports/tr15/
	StringRules_NFKC StringRules_UnicodeNormalizationForm = 2
	// NFKD form as defined by https://www.unicode.org/reports/tr15/
	StringRules_NFKD StringRules_UnicodeNormalizationForm = 3
	// PRECIS UsernameCaseMapped profile as defined by RFC 8265
	StringRules_PRECIS_USERNAME_CASE_MAPPED StringRules_UnicodeNormalizationForm = 100
	// PRECIS UsernameCasePreserved profile as defined by RFC 8265
	StringRules_PRECIS_USERNAME_CASE_PRESERVED StringRules_UnicodeNormalizationForm = 101
	// PRECIS OpaqueString profile as defined by RFC 8265
	StringRules_PRECIS_OPAQUE_STRING StringRules_UnicodeNormalizationForm = 102
)

// Enum value maps for StringRules_UnicodeNormalizationForm.
var (
	StringRules_UnicodeNormalizationForm_name = map[int32]string{
		0:   "NFC",
		1:   "NFD",
		2:   "NFKC",
		3:   "NFKD",
		100: "PRECIS_USERNAME_CASE_MAPPED",
		101: "PRECIS_USERNAME_CASE_PRESERVED",
		102: "PRECIS_OPAQUE_STRING",
	}
	StringRules_UnicodeNormalizationForm_value = map[string]int32{
		"NFC":                            0,
		"NFD":                            1,
		"NFKC":                           2,
		"NFKD":                           3,
		"PRECIS_USERNAME_CASE_MAPPED":    100,
		"PRECIS_USERNAME_CASE_PRESERVED": 101,
		"PRECIS_OPAQUE_STRING":           102,
	}
)

func (x StringRules_UnicodeNormalizationForm) Enum() *StringRules_UnicodeNormalizationForm {
	p := new(StringRules_UnicodeNormalizationForm)
	*p = x
	return p
}

func (x StringRules_UnicodeNormalizationForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringRules_UnicodeNormalizationForm) Descriptor() protoreflect.EnumDescriptor {
	return file_cybozu_validate_options_proto_enumTypes[0].Descriptor()
}

func (StringRules_UnicodeNormalizationForm) Type() protoreflect.EnumType {
	return &file_cybozu_validate_options_proto_enumTypes[0]
}

func (x StringRules_UnicodeNormalizationForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringRules_UnicodeNormalizationForm.Descriptor instead.
func (StringRules_UnicodeNormalizationForm) EnumDescriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{9, 0}
}

// FieldRules encapsulates the rules for each type of field.
// Depending on the field type, one or two rule sets can be specified.
type FieldRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of these constraints can be specified for a field.
	//
	// If the field is `optional` and not set, the specified rule will not be applied.
	// For a map type field like `map<string, int64>`, you may specify a rule for the value type, here `int64`.
	//
	// Types that are assignable to Type:
	//
	//	*FieldRules_Float
	//	*FieldRules_Double
	//	*FieldRules_Int32
	//	*FieldRules_Int64
	//	*FieldRules_Uint32
	//	*FieldRules_Uint64
	//	*FieldRules_Sint32
	//	*FieldRules_Sint64
	//	*FieldRules_Fixed32
	//	*FieldRules_Fixed64
	//	*FieldRules_Sfixed32
	//	*FieldRules_Sfixed64
	//	*FieldRules_Bool
	//	*FieldRules_String_
	//	*FieldRules_Bytes
	//	*FieldRules_Enum
	//	*FieldRules_Message
	Type isFieldRules_Type `protobuf_oneof:"type"`
	// One of these constraints can be specified for a repeated field or a map field.
	//
	// Types that are assignable to Items:
	//
	//	*FieldRules_Repeated
	//	*FieldRules_Map
	Items isFieldRules_Items `protobuf_oneof:"items"`
}

func (x *FieldRules) Reset() {
	*x = FieldRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRules) ProtoMessage() {}

func (x *FieldRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRules.ProtoReflect.Descriptor instead.
func (*FieldRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{0}
}

func (m *FieldRules) GetType() isFieldRules_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FieldRules) GetFloat() *FloatRules {
	if x, ok := x.GetType().(*FieldRules_Float); ok {
		return x.Float
	}
	return nil
}

func (x *FieldRules) GetDouble() *DoubleRules {
	if x, ok := x.GetType().(*FieldRules_Double); ok {
		return x.Double
	}
	return nil
}

func (x *FieldRules) GetInt32() *Int32Rules {
	if x, ok := x.GetType().(*FieldRules_Int32); ok {
		return x.Int32
	}
	return nil
}

func (x *FieldRules) GetInt64() *Int64Rules {
	if x, ok := x.GetType().(*FieldRules_Int64); ok {
		return x.Int64
	}
	return nil
}

func (x *FieldRules) GetUint32() *Uint32Rules {
	if x, ok := x.GetType().(*FieldRules_Uint32); ok {
		return x.Uint32
	}
	return nil
}

func (x *FieldRules) GetUint64() *Uint64Rules {
	if x, ok := x.GetType().(*FieldRules_Uint64); ok {
		return x.Uint64
	}
	return nil
}

func (x *FieldRules) GetSint32() *Int32Rules {
	if x, ok := x.GetType().(*FieldRules_Sint32); ok {
		return x.Sint32
	}
	return nil
}

func (x *FieldRules) GetSint64() *Int64Rules {
	if x, ok := x.GetType().(*FieldRules_Sint64); ok {
		return x.Sint64
	}
	return nil
}

func (x *FieldRules) GetFixed32() *Uint32Rules {
	if x, ok := x.GetType().(*FieldRules_Fixed32); ok {
		return x.Fixed32
	}
	return nil
}

func (x *FieldRules) GetFixed64() *Uint64Rules {
	if x, ok := x.GetType().(*FieldRules_Fixed64); ok {
		return x.Fixed64
	}
	return nil
}

func (x *FieldRules) GetSfixed32() *Int32Rules {
	if x, ok := x.GetType().(*FieldRules_Sfixed32); ok {
		return x.Sfixed32
	}
	return nil
}

func (x *FieldRules) GetSfixed64() *Int64Rules {
	if x, ok := x.GetType().(*FieldRules_Sfixed64); ok {
		return x.Sfixed64
	}
	return nil
}

func (x *FieldRules) GetBool() *BoolRules {
	if x, ok := x.GetType().(*FieldRules_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *FieldRules) GetString_() *StringRules {
	if x, ok := x.GetType().(*FieldRules_String_); ok {
		return x.String_
	}
	return nil
}

func (x *FieldRules) GetBytes() *BytesRules {
	if x, ok := x.GetType().(*FieldRules_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *FieldRules) GetEnum() *EnumRules {
	if x, ok := x.GetType().(*FieldRules_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *FieldRules) GetMessage() *MessageRules {
	if x, ok := x.GetType().(*FieldRules_Message); ok {
		return x.Message
	}
	return nil
}

func (m *FieldRules) GetItems() isFieldRules_Items {
	if m != nil {
		return m.Items
	}
	return nil
}

func (x *FieldRules) GetRepeated() *ItemsRules {
	if x, ok := x.GetItems().(*FieldRules_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (x *FieldRules) GetMap() *ItemsRules {
	if x, ok := x.GetItems().(*FieldRules_Map); ok {
		return x.Map
	}
	return nil
}

type isFieldRules_Type interface {
	isFieldRules_Type()
}

type FieldRules_Float struct {
	// `float` can be specified for a float type field.
	Float *FloatRules `protobuf:"bytes,1,opt,name=float,proto3,oneof"`
}

type FieldRules_Double struct {
	// `double` can be specified for a double type field.
	Double *DoubleRules `protobuf:"bytes,2,opt,name=double,proto3,oneof"`
}

type FieldRules_Int32 struct {
	// `int32` can be specified for an int32 type field.
	Int32 *Int32Rules `protobuf:"bytes,3,opt,name=int32,proto3,oneof"`
}

type FieldRules_Int64 struct {
	// `int64` can be specified for an int64 type field.
	Int64 *Int64Rules `protobuf:"bytes,4,opt,name=int64,proto3,oneof"`
}

type FieldRules_Uint32 struct {
	// `uint32` can be specified for a uint32 type field.
	Uint32 *Uint32Rules `protobuf:"bytes,5,opt,name=uint32,proto3,oneof"`
}

type FieldRules_Uint64 struct {
	// `uint64` can be specified for a uint64 type field.
	Uint64 *Uint64Rules `protobuf:"bytes,6,opt,name=uint64,proto3,oneof"`
}

type FieldRules_Sint32 struct {
	// `sint32` can be specified for a sint32 type field.
	Sint32 *Int32Rules `protobuf:"bytes,7,opt,name=sint32,proto3,oneof"`
}

type FieldRules_Sint64 struct {
	// `sint64` can be specified for a sint64 type field.
	Sint64 *Int64Rules `protobuf:"bytes,8,opt,name=sint64,proto3,oneof"`
}

type FieldRules_Fixed32 struct {
	// `fixed32` can be specified for a fixed32 type field.
	Fixed32 *Uint32Rules `protobuf:"bytes,9,opt,name=fixed32,proto3,oneof"`
}

type FieldRules_Fixed64 struct {
	// `fixed64` can be specified for a fixed64 type field.
	Fixed64 *Uint64Rules `protobuf:"bytes,10,opt,name=fixed64,proto3,oneof"`
}

type FieldRules_Sfixed32 struct {
	// `sfixed32` can be specified for an sfixed32 type field.
	Sfixed32 *Int32Rules `protobuf:"bytes,11,opt,name=sfixed32,proto3,oneof"`
}

type FieldRules_Sfixed64 struct {
	// `sfixed64` can be specified for an sfixed64 type field.
	Sfixed64 *Int64Rules `protobuf:"bytes,12,opt,name=sfixed64,proto3,oneof"`
}

type FieldRules_Bool struct {
	// `bool` can be specified for a bool type field.
	Bool *BoolRules `protobuf:"bytes,13,opt,name=bool,proto3,oneof"`
}

type FieldRules_String_ struct {
	// `string` can be specified for a string type field.
	String_ *StringRules `protobuf:"bytes,14,opt,name=string,proto3,oneof"`
}

type FieldRules_Bytes struct {
	// `bytes` can be specified for a bytes type field.
	Bytes *BytesRules `protobuf:"bytes,15,opt,name=bytes,proto3,oneof"`
}

type FieldRules_Enum struct {
	// `enum` can be specified for an enum type field.
	Enum *EnumRules `protobuf:"bytes,16,opt,name=enum,proto3,oneof"`
}

type FieldRules_Message struct {
	// `message` can be specified for a message type field except for the well-known types.
	Message *MessageRules `protobuf:"bytes,17,opt,name=message,proto3,oneof"`
}

func (*FieldRules_Float) isFieldRules_Type() {}

func (*FieldRules_Double) isFieldRules_Type() {}

func (*FieldRules_Int32) isFieldRules_Type() {}

func (*FieldRules_Int64) isFieldRules_Type() {}

func (*FieldRules_Uint32) isFieldRules_Type() {}

func (*FieldRules_Uint64) isFieldRules_Type() {}

func (*FieldRules_Sint32) isFieldRules_Type() {}

func (*FieldRules_Sint64) isFieldRules_Type() {}

func (*FieldRules_Fixed32) isFieldRules_Type() {}

func (*FieldRules_Fixed64) isFieldRules_Type() {}

func (*FieldRules_Sfixed32) isFieldRules_Type() {}

func (*FieldRules_Sfixed64) isFieldRules_Type() {}

func (*FieldRules_Bool) isFieldRules_Type() {}

func (*FieldRules_String_) isFieldRules_Type() {}

func (*FieldRules_Bytes) isFieldRules_Type() {}

func (*FieldRules_Enum) isFieldRules_Type() {}

func (*FieldRules_Message) isFieldRules_Type() {}

type isFieldRules_Items interface {
	isFieldRules_Items()
}

type FieldRules_Repeated struct {
	// `repeated` can be specified for any field with `repeated` specifier.
	Repeated *ItemsRules `protobuf:"bytes,1000,opt,name=repeated,proto3,oneof"`
}

type FieldRules_Map struct {
	// `map` can be specified for any map type field.
	Map *ItemsRules `protobuf:"bytes,1001,opt,name=map,proto3,oneof"`
}

func (*FieldRules_Repeated) isFieldRules_Items() {}

func (*FieldRules_Map) isFieldRules_Items() {}

// ItemsRules are optional message to specify the constraints on the number
// of items in a repeated field or a map type.
type ItemsRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `min_items` specifies that this field must have the specified number of items at a minimum.
	MinItems *uint32 `protobuf:"varint,1,opt,name=min_items,json=minItems,proto3,oneof" json:"min_items,omitempty"`
	// `max_items` specifies that this field must have the specified number of items at a maximum.
	MaxItems *uint32 `protobuf:"varint,2,opt,name=max_items,json=maxItems,proto3,oneof" json:"max_items,omitempty"`
}

func (x *ItemsRules) Reset() {
	*x = ItemsRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemsRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemsRules) ProtoMessage() {}

func (x *ItemsRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemsRules.ProtoReflect.Descriptor instead.
func (*ItemsRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{1}
}

func (x *ItemsRules) GetMinItems() uint32 {
	if x != nil && x.MinItems != nil {
		return *x.MinItems
	}
	return 0
}

func (x *ItemsRules) GetMaxItems() uint32 {
	if x != nil && x.MaxItems != nil {
		return *x.MaxItems
	}
	return 0
}

// FloatRules provides rules for `float` field.
type FloatRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `lt` specifies that this field must be less than the specified value.
	Lt *float32 `protobuf:"fixed32,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` specifies that this field must be less than or equal to the specified value.
	Lte *float32 `protobuf:"fixed32,2,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` specifies that this field must be greater than the specified value.
	Gt *float32 `protobuf:"fixed32,3,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` specifies that this field must be greater than or equal to the specified value.
	Gte *float32 `protobuf:"fixed32,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *FloatRules) Reset() {
	*x = FloatRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRules) ProtoMessage() {}

func (x *FloatRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRules.ProtoReflect.Descriptor instead.
func (*FloatRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{2}
}

func (x *FloatRules) GetLt() float32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FloatRules) GetLte() float32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *FloatRules) GetGt() float32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FloatRules) GetGte() float32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

// DoubleRules provides rules for `double` field.
type DoubleRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `lt` specifies that this field must be less than the specified value.
	Lt *float64 `protobuf:"fixed64,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` specifies that this field must be less than or equal to the specified value.
	Lte *float64 `protobuf:"fixed64,2,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` specifies that this field must be greater than the specified value.
	Gt *float64 `protobuf:"fixed64,3,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` specifies that this field must be greater than or equal to the specified value.
	Gte *float64 `protobuf:"fixed64,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *DoubleRules) Reset() {
	*x = DoubleRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRules) ProtoMessage() {}

func (x *DoubleRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRules.ProtoReflect.Descriptor instead.
func (*DoubleRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{3}
}

func (x *DoubleRules) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *DoubleRules) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *DoubleRules) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *DoubleRules) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

// Int32Rules provides rules for `int32`, `sint32`, `sfixed32` fields.
type Int32Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `lt` specifies that this field must be less than the specified value.
	Lt *int32 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` specifies that this field must be less than or equal to the specified value.
	Lte *int32 `protobuf:"varint,2,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` specifies that this field must be greater than the specified value.
	Gt *int32 `protobuf:"varint,3,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` specifies that this field must be greater than or equal to the specified value.
	Gte *int32 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Int32Rules) Reset() {
	*x = Int32Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Rules) ProtoMessage() {}

func (x *Int32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Rules.ProtoReflect.Descriptor instead.
func (*Int32Rules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{4}
}

func (x *Int32Rules) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int32Rules) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int32Rules) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int32Rules) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

// Int64Rules provides rules for `int64`, `sint64`, `sfixed64` fields.
type Int64Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `lt` specifies that this field must be less than the specified value.
	Lt *int64 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` specifies that this field must be less than or equal to the specified value.
	Lte *int64 `protobuf:"varint,2,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` specifies that this field must be greater than the specified value.
	Gt *int64 `protobuf:"varint,3,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` specifies that this field must be greater than or equal to the specified value.
	Gte *int64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Int64Rules) Reset() {
	*x = Int64Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Rules) ProtoMessage() {}

func (x *Int64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Rules.ProtoReflect.Descriptor instead.
func (*Int64Rules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{5}
}

func (x *Int64Rules) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Int64Rules) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Int64Rules) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Int64Rules) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

// Uint32Rules provides rules for `uint32` and `fixed32` fields.
type Uint32Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `lt` specifies that this field must be less than the specified value.
	Lt *uint32 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` specifies that this field must be less than or equal to the specified value.
	Lte *uint32 `protobuf:"varint,2,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` specifies that this field must be greater than the specified value.
	Gt *uint32 `protobuf:"varint,3,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` specifies that this field must be greater than or equal to the specified value.
	Gte *uint32 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Uint32Rules) Reset() {
	*x = Uint32Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Rules) ProtoMessage() {}

func (x *Uint32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Rules.ProtoReflect.Descriptor instead.
func (*Uint32Rules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{6}
}

func (x *Uint32Rules) GetLt() uint32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Uint32Rules) GetLte() uint32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Uint32Rules) GetGt() uint32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Uint32Rules) GetGte() uint32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

// Uint64Rules provides rules for `uint64` and `fixed64` fields.
type Uint64Rules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `lt` specifies that this field must be less than the specified value.
	Lt *uint64 `protobuf:"varint,1,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// `lte` specifies that this field must be less than or equal to the specified value.
	Lte *uint64 `protobuf:"varint,2,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// `gt` specifies that this field must be greater than the specified value.
	Gt *uint64 `protobuf:"varint,3,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// `gte` specifies that this field must be greater than or equal to the specified value.
	Gte *uint64 `protobuf:"varint,4,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
}

func (x *Uint64Rules) Reset() {
	*x = Uint64Rules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64Rules) ProtoMessage() {}

func (x *Uint64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64Rules.ProtoReflect.Descriptor instead.
func (*Uint64Rules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{7}
}

func (x *Uint64Rules) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *Uint64Rules) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *Uint64Rules) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *Uint64Rules) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

// BoolRules provides rules for `bool` field.
// Currently, no rule is available.
type BoolRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRules.ProtoReflect.Descriptor instead.
func (*BoolRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{8}
}

// StringRules provides rules for `string` field.
type StringRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `norm` specifies which normalization is to be applied to the string.
	// By default, strings are normalized into the NFC form.
	Norm StringRules_UnicodeNormalizationForm `protobuf:"varint,1,opt,name=norm,proto3,enum=cybozu.validate.StringRules_UnicodeNormalizationForm" json:"norm,omitempty"`
	// `ignore_empty` specifies whether to ignore validation rules when the string is empty.
	IgnoreEmpty bool `protobuf:"varint,2,opt,name=ignore_empty,json=ignoreEmpty,proto3" json:"ignore_empty,omitempty"`
	// `min_length` specifies the minimum string length.
	// The length is counted as the number of UNICODE codepoints after normalization is applied.
	MinLength *uint32 `protobuf:"varint,3,opt,name=min_length,json=minLength,proto3,oneof" json:"min_length,omitempty"`
	// `max_length` specifies the maximum string length.
	// The length is counted as the number of UNICODE codepoints after normalization is applied.
	MaxLength *uint32 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
	// `regex` specifies a regular expression that the string must match.
	// The syntax of the regular expression is the same as google/re2.
	// https://github.com/google/re2/wiki/Syntax
	Regex *string `protobuf:"bytes,5,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
	// For convenience, one of the following well-known pattern can be specified.
	//
	// Types that are assignable to Predefined:
	//
	//	*StringRules_Email
	//	*StringRules_Uri
	//	*StringRules_E164
	Predefined isStringRules_Predefined `protobuf_oneof:"predefined"`
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{9}
}

func (x *StringRules) GetNorm() StringRules_UnicodeNormalizationForm {
	if x != nil {
		return x.Norm
	}
	return StringRules_NFC
}

func (x *StringRules) GetIgnoreEmpty() bool {
	if x != nil {
		return x.IgnoreEmpty
	}
	return false
}

func (x *StringRules) GetMinLength() uint32 {
	if x != nil && x.MinLength != nil {
		return *x.MinLength
	}
	return 0
}

func (x *StringRules) GetMaxLength() uint32 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

func (x *StringRules) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (m *StringRules) GetPredefined() isStringRules_Predefined {
	if m != nil {
		return m.Predefined
	}
	return nil
}

func (x *StringRules) GetEmail() bool {
	if x, ok := x.GetPredefined().(*StringRules_Email); ok {
		return x.Email
	}
	return false
}

func (x *StringRules) GetUri() bool {
	if x, ok := x.GetPredefined().(*StringRules_Uri); ok {
		return x.Uri
	}
	return false
}

func (x *StringRules) GetE164() bool {
	if x, ok := x.GetPredefined().(*StringRules_E164); ok {
		return x.E164
	}
	return false
}

type isStringRules_Predefined interface {
	isStringRules_Predefined()
}

type StringRules_Email struct {
	// `email` specifies that the field must be canonicalized and validated as an email address as defined by Section 3.4.1 in RFC 5322.
	// See https://www.rfc-editor.org/rfc/rfc5322#section-3.4.1
	Email bool `protobuf:"varint,100,opt,name=email,proto3,oneof"`
}

type StringRules_Uri struct {
	// `uri` specifies that the field must be canonicalized and validated as an absolute URI as defined by RFC 3986.
	Uri bool `protobuf:"varint,101,opt,name=uri,proto3,oneof"`
}

type StringRules_E164 struct {
	// `e164` specifies that the field must be canonicalized and validated as a telephone number as defined by E.164
	// with a prefixing `+` sign and optional hyphen separators. E.g., "+81-3-1111-1111".
	// See https://en.wikipedia.org/wiki/E.164
	E164 bool `protobuf:"varint,102,opt,name=e164,proto3,oneof"`
}

func (*StringRules_Email) isStringRules_Predefined() {}

func (*StringRules_Uri) isStringRules_Predefined() {}

func (*StringRules_E164) isStringRules_Predefined() {}

// BytesRules provides rules for `bytes` field.
type BytesRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `min_length` specifies the minimum length.
	// The length is counted as the number of bytes.
	MinLength *uint32 `protobuf:"varint,3,opt,name=min_length,json=minLength,proto3,oneof" json:"min_length,omitempty"`
	// `max_length` specifies the maximum length.
	// The length is counted as the number of bytes.
	MaxLength *uint32 `protobuf:"varint,4,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
}

func (x *BytesRules) Reset() {
	*x = BytesRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRules) ProtoMessage() {}

func (x *BytesRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRules.ProtoReflect.Descriptor instead.
func (*BytesRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{10}
}

func (x *BytesRules) GetMinLength() uint32 {
	if x != nil && x.MinLength != nil {
		return *x.MinLength
	}
	return 0
}

func (x *BytesRules) GetMaxLength() uint32 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

// EnumRules provides rules for `enum` field.
type EnumRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `required` specifies that this field must not be zero (usually, zero means unspecified).
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// `defined_only` specifies that this field must be only one of the defined
	// values for this enum, failing on any undefined value.
	DefinedOnly bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly,proto3" json:"defined_only,omitempty"`
}

func (x *EnumRules) Reset() {
	*x = EnumRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRules) ProtoMessage() {}

func (x *EnumRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRules.ProtoReflect.Descriptor instead.
func (*EnumRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{11}
}

func (x *EnumRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *EnumRules) GetDefinedOnly() bool {
	if x != nil {
		return x.DefinedOnly
	}
	return false
}

// MessageRules provides rules for `message` field.
// For a message field, validation/normalization will be done recursively.
type MessageRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `required` specifies that this field must be set.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *MessageRules) Reset() {
	*x = MessageRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cybozu_validate_options_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRules) ProtoMessage() {}

func (x *MessageRules) ProtoReflect() protoreflect.Message {
	mi := &file_cybozu_validate_options_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRules.ProtoReflect.Descriptor instead.
func (*MessageRules) Descriptor() ([]byte, []int) {
	return file_cybozu_validate_options_proto_rawDescGZIP(), []int{12}
}

func (x *MessageRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

var file_cybozu_validate_options_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1179,
		Name:          "cybozu.validate.ignored",
		Tag:           "varint,1179,opt,name=ignored",
		Filename:      "cybozu/validate/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         1179,
		Name:          "cybozu.validate.required",
		Tag:           "varint,1179,opt,name=required",
		Filename:      "cybozu/validate/options.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRules)(nil),
		Field:         1179,
		Name:          "cybozu.validate.rules",
		Tag:           "bytes,1179,opt,name=rules",
		Filename:      "cybozu/validate/options.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// `ignored` stops generating `Validate()` method for this message.
	//
	// optional bool ignored = 1179;
	E_Ignored = &file_cybozu_validate_options_proto_extTypes[0]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// `required` ensures that a field in this oneof is set.
	//
	// optional bool required = 1179;
	E_Required = &file_cybozu_validate_options_proto_extTypes[1]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// `rules` specify the validations/normalizations to be performed on this field.
	// Note that a string field will always be normalized to the UNICODE NFC form
	// even if there is no rule specified.
	//
	// optional cybozu.validate.FieldRules rules = 1179;
	E_Rules = &file_cybozu_validate_options_proto_extTypes[2]
)

var File_cybozu_validate_options_proto protoreflect.FileDescriptor

var file_cybozu_validate_options_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb6, 0x08, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a,
	0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x36, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a,
	0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x30, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f,
	0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18,
	0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6c, 0x0a, 0x0a, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x02, 0x67,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13,
	0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x03,
	0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x02,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x03, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x6c, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x22, 0x0b, 0x0a, 0x09, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xf8, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x6e, 0x6f, 0x72, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x04, 0x6e, 0x6f,
	0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x31, 0x36, 0x34, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x65, 0x31, 0x36, 0x34, 0x22, 0x9f, 0x01, 0x0a, 0x18, 0x55,
	0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x46, 0x43, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x46, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x46, 0x4b,
	0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x46, 0x4b, 0x44, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x64, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x10, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x5f, 0x4f, 0x50, 0x41,
	0x51, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x66, 0x42, 0x0c, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x22, 0x72, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x4a, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x3a,
	0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9b, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x3a, 0x3a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9b, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x51, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x9b,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x79, 0x62, 0x6f, 0x7a, 0x75, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cybozu_validate_options_proto_rawDescOnce sync.Once
	file_cybozu_validate_options_proto_rawDescData = file_cybozu_validate_options_proto_rawDesc
)

func file_cybozu_validate_options_proto_rawDescGZIP() []byte {
	file_cybozu_validate_options_proto_rawDescOnce.Do(func() {
		file_cybozu_validate_options_proto_rawDescData = protoimpl.X.CompressGZIP(file_cybozu_validate_options_proto_rawDescData)
	})
	return file_cybozu_validate_options_proto_rawDescData
}

var file_cybozu_validate_options_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cybozu_validate_options_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_cybozu_validate_options_proto_goTypes = []interface{}{
	(StringRules_UnicodeNormalizationForm)(0), // 0: cybozu.validate.StringRules.UnicodeNormalizationForm
	(*FieldRules)(nil),                        // 1: cybozu.validate.FieldRules
	(*ItemsRules)(nil),                        // 2: cybozu.validate.ItemsRules
	(*FloatRules)(nil),                        // 3: cybozu.validate.FloatRules
	(*DoubleRules)(nil),                       // 4: cybozu.validate.DoubleRules
	(*Int32Rules)(nil),                        // 5: cybozu.validate.Int32Rules
	(*Int64Rules)(nil),                        // 6: cybozu.validate.Int64Rules
	(*Uint32Rules)(nil),                       // 7: cybozu.validate.Uint32Rules
	(*Uint64Rules)(nil),                       // 8: cybozu.validate.Uint64Rules
	(*BoolRules)(nil),                         // 9: cybozu.validate.BoolRules
	(*StringRules)(nil),                       // 10: cybozu.validate.StringRules
	(*BytesRules)(nil),                        // 11: cybozu.validate.BytesRules
	(*EnumRules)(nil),                         // 12: cybozu.validate.EnumRules
	(*MessageRules)(nil),                      // 13: cybozu.validate.MessageRules
	(*descriptorpb.MessageOptions)(nil),       // 14: google.protobuf.MessageOptions
	(*descriptorpb.OneofOptions)(nil),         // 15: google.protobuf.OneofOptions
	(*descriptorpb.FieldOptions)(nil),         // 16: google.protobuf.FieldOptions
}
var file_cybozu_validate_options_proto_depIdxs = []int32{
	3,  // 0: cybozu.validate.FieldRules.float:type_name -> cybozu.validate.FloatRules
	4,  // 1: cybozu.validate.FieldRules.double:type_name -> cybozu.validate.DoubleRules
	5,  // 2: cybozu.validate.FieldRules.int32:type_name -> cybozu.validate.Int32Rules
	6,  // 3: cybozu.validate.FieldRules.int64:type_name -> cybozu.validate.Int64Rules
	7,  // 4: cybozu.validate.FieldRules.uint32:type_name -> cybozu.validate.Uint32Rules
	8,  // 5: cybozu.validate.FieldRules.uint64:type_name -> cybozu.validate.Uint64Rules
	5,  // 6: cybozu.validate.FieldRules.sint32:type_name -> cybozu.validate.Int32Rules
	6,  // 7: cybozu.validate.FieldRules.sint64:type_name -> cybozu.validate.Int64Rules
	7,  // 8: cybozu.validate.FieldRules.fixed32:type_name -> cybozu.validate.Uint32Rules
	8,  // 9: cybozu.validate.FieldRules.fixed64:type_name -> cybozu.validate.Uint64Rules
	5,  // 10: cybozu.validate.FieldRules.sfixed32:type_name -> cybozu.validate.Int32Rules
	6,  // 11: cybozu.validate.FieldRules.sfixed64:type_name -> cybozu.validate.Int64Rules
	9,  // 12: cybozu.validate.FieldRules.bool:type_name -> cybozu.validate.BoolRules
	10, // 13: cybozu.validate.FieldRules.string:type_name -> cybozu.validate.StringRules
	11, // 14: cybozu.validate.FieldRules.bytes:type_name -> cybozu.validate.BytesRules
	12, // 15: cybozu.validate.FieldRules.enum:type_name -> cybozu.validate.EnumRules
	13, // 16: cybozu.validate.FieldRules.message:type_name -> cybozu.validate.MessageRules
	2,  // 17: cybozu.validate.FieldRules.repeated:type_name -> cybozu.validate.ItemsRules
	2,  // 18: cybozu.validate.FieldRules.map:type_name -> cybozu.validate.ItemsRules
	0,  // 19: cybozu.validate.StringRules.norm:type_name -> cybozu.validate.StringRules.UnicodeNormalizationForm
	14, // 20: cybozu.validate.ignored:extendee -> google.protobuf.MessageOptions
	15, // 21: cybozu.validate.required:extendee -> google.protobuf.OneofOptions
	16, // 22: cybozu.validate.rules:extendee -> google.protobuf.FieldOptions
	1,  // 23: cybozu.validate.rules:type_name -> cybozu.validate.FieldRules
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	23, // [23:24] is the sub-list for extension type_name
	20, // [20:23] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_cybozu_validate_options_proto_init() }
func file_cybozu_validate_options_proto_init() {
	if File_cybozu_validate_options_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cybozu_validate_options_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemsRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint64Rules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cybozu_validate_options_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cybozu_validate_options_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FieldRules_Float)(nil),
		(*FieldRules_Double)(nil),
		(*FieldRules_Int32)(nil),
		(*FieldRules_Int64)(nil),
		(*FieldRules_Uint32)(nil),
		(*FieldRules_Uint64)(nil),
		(*FieldRules_Sint32)(nil),
		(*FieldRules_Sint64)(nil),
		(*FieldRules_Fixed32)(nil),
		(*FieldRules_Fixed64)(nil),
		(*FieldRules_Sfixed32)(nil),
		(*FieldRules_Sfixed64)(nil),
		(*FieldRules_Bool)(nil),
		(*FieldRules_String_)(nil),
		(*FieldRules_Bytes)(nil),
		(*FieldRules_Enum)(nil),
		(*FieldRules_Message)(nil),
		(*FieldRules_Repeated)(nil),
		(*FieldRules_Map)(nil),
	}
	file_cybozu_validate_options_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_cybozu_validate_options_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*StringRules_Email)(nil),
		(*StringRules_Uri)(nil),
		(*StringRules_E164)(nil),
	}
	file_cybozu_validate_options_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cybozu_validate_options_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_cybozu_validate_options_proto_goTypes,
		DependencyIndexes: file_cybozu_validate_options_proto_depIdxs,
		EnumInfos:         file_cybozu_validate_options_proto_enumTypes,
		MessageInfos:      file_cybozu_validate_options_proto_msgTypes,
		ExtensionInfos:    file_cybozu_validate_options_proto_extTypes,
	}.Build()
	File_cybozu_validate_options_proto = out.File
	file_cybozu_validate_options_proto_rawDesc = nil
	file_cybozu_validate_options_proto_goTypes = nil
	file_cybozu_validate_options_proto_depIdxs = nil
}
